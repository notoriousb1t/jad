(function () {
    'use strict';

    var config = {
        content: [
            {
                content: [
                    {
                        componentName: 'project-explorer',
                        componentState: { label: 'A' },
                        title: 'Navigator',
                        type: 'component',
                        width: 15
                    },
                    {
                        content: [
                            {
                                componentName: 'animation-viewer',
                                componentState: { label: 'A' },
                                height: 60,
                                title: 'Animation Player',
                                type: 'component'
                            },
                            {
                                componentName: 'animation-source-editor',
                                componentState: { label: 'A' },
                                title: 'Animation Source',
                                type: 'component'
                            }
                        ],
                        type: 'column'
                    },
                    {
                        content: [
                            {
                                componentName: 'object-inspector',
                                componentState: { label: 'B' },
                                title: 'Inspector',
                                type: 'component'
                            }
                        ],
                        type: 'column',
                        width: 18
                    }
                ],
                type: 'row'
            }
        ],
        dimensions: {
            borderWidth: 5,
            dragProxyHeight: 200,
            dragProxyWidth: 300,
            headerHeight: 20,
            minItemHeight: 10,
            minItemWidth: 10,
        },
        labels: {
            close: 'close',
            maximise: 'maximise',
            minimise: 'minimise',
            popout: 'open in new window'
        },
        settings: {
            hasHeaders: true,
            constrainDragToContainer: true,
            reorderEnabled: true,
            selectionEnabled: false,
            closePopoutsOnUnload: false,
            showPopoutIcon: false,
            showMaximiseIcon: false,
            showCloseIcon: false
        }
    };

    function debounce(func, wait) {
        var timeoutHandle;
        return function () {
            var later = function () {
                timeoutHandle = undefined;
                func.apply(this, arguments);
            };
            clearTimeout(timeoutHandle);
            timeoutHandle = setTimeout(later, wait);
        };
    }

    var AnimationSourceEditorComponent = (function () {
        function AnimationSourceEditorComponent() {
            this.controller = AnimationSourceEditorController;
            this.templateUrl = './app/components/animation-source-editor/animation-source-editor.component.html';
        }
        return AnimationSourceEditorComponent;
    }());
    var AnimationSourceEditorController = (function () {
        function AnimationSourceEditorController($scope, $element, $timeout, project) {
            var _this = this;
            var el = $element.find('.editor')[0];
            var editor = monaco.editor.create(el, {
                value: '',
                language: 'json',
                theme: 'vs-dark',
                automaticLayout: true
            });
            var setAnimationState = debounce(function () {
                try {
                    var options = JSON.parse(_this.editor.getValue());
                    _this.animation.setState(options);
                    console.log('setting state');
                }
                catch (err) {
                }
            }, 650);
            editor.onDidChangeModelContent(setAnimationState);
            $scope.$watch(function () { return project.current && project.current.activeAnimation; }, this.refreshAnimation.bind(this), true);
            this.editor = editor;
        }
        AnimationSourceEditorController.prototype.refreshAnimation = function (newVal, oldValue) {
            var source = newVal ? newVal.toString() : '';
            var editor = this.editor;
            var pos = editor.getPosition();
            editor.setValue(source);
            editor.setPosition(pos);
            this.animation = newVal;
        };
        AnimationSourceEditorController.$inject = ['$scope', '$element', '$timeout', 'project'];
        return AnimationSourceEditorController;
    }());

    var fps = Math.round(1000 / 15.0);
    var animationTargetSelector = '#animationTarget';
    var rectangleShape = "<div id=\"animationTarget\" class=\"animation-rectangle\"></div>";
    var buttonShape = "<button id=\"animationTarget\" class=\"animation-button k-button\">Animate me</button>";
    var textShape = "<div id=\"animationTarget\" class=\"animation-text\">Animate me</div>";
    var emptyShape = "(Select an animation in the Project Explorer)";
    var playerSelector = '.animation-viewer .player';
    var AnimationViewerComponent = (function () {
        function AnimationViewerComponent() {
            this.controller = AnimationViewerController;
            this.templateUrl = './app/components/animation-viewer/animation-viewer.component.html';
        }
        return AnimationViewerComponent;
    }());
    var AnimationViewerController = (function () {
        function AnimationViewerController($scope, $timeout, project, just) {
            var _this = this;
            this.currentTime = 0;
            this.playState = 'paused';
            this.shape = 'square';
            this.$scope = $scope;
            this.$timeout = $timeout;
            this.just = just;
            this.shapeOptions = {
                dataSource: {
                    data: [
                        'square', 'button', 'text'
                    ]
                },
                valuePrimitive: true
            };
            this.activeAnimation = project.current.activeAnimation;
            this.redraw();
            var requestRedraw = debounce(this.redraw.bind(this), 50);
            $scope.$watch(function () { return project.current && project.current.activeAnimation; }, function (newVal, oldValue) {
                _this.activeAnimation = newVal;
            });
            $scope.$watch(function () { return project.current && project.current.activeAnimation && project.current.activeAnimation.timings; }, function (newVal, oldValue) {
                requestRedraw();
            }, true);
            $scope.$watch(function () { return project.current && project.current.activeAnimation && project.current.activeAnimation.keyframes; }, function (newVal, oldValue) {
                requestRedraw();
            }, true);
            $scope.$watch(function () { return _this.shape; }, function (newVal, oldValue) {
                _this.redraw();
            });
            this.updateCurrentTime = this.updateCurrentTime.bind(this);
            this.updateCurrentTime();
        }
        Object.defineProperty(AnimationViewerController.prototype, "duration", {
            get: function () {
                if (this.activeAnimation && this.activeAnimation.timings) {
                    return this.activeAnimation.timings.duration;
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AnimationViewerController.prototype, "playButtonClass", {
            get: function () {
                return this.playState === 'playing' ? 'glyphicon glyphicon-pause' : 'glyphicon glyphicon-play';
            },
            enumerable: true,
            configurable: true
        });
        AnimationViewerController.prototype.togglePlay = function () {
            if (this.playState === 'playing') {
                this.pauseAnimation();
                return;
            }
            this.playAnimation();
        };
        AnimationViewerController.prototype.playAnimation = function () {
            this.playState = 'playing';
            if (!this.animator) {
                this.redraw();
                return;
            }
            this.animator.play();
        };
        AnimationViewerController.prototype.pauseAnimation = function () {
            this.playState = 'paused';
            this.animator.pause();
        };
        AnimationViewerController.prototype.setAnimationTime = function () {
            var currentTime = this.currentTime;
            if (this.animator) {
                this.animator.currentTime = typeof currentTime === 'string' ? parseFloat(currentTime) : currentTime;
            }
        };
        AnimationViewerController.prototype.stopAnimation = function () {
            this.playState = 'finished';
            if (!this.animator) {
                return;
            }
            this.animator.cancel();
        };
        AnimationViewerController.prototype.updateCurrentTime = function () {
            var newCurrentTime;
            if (this.playState === 'finished' || this.playState === 'canceled') {
                newCurrentTime = 0;
            }
            else {
                var a = this.animator;
                var duration = (a && a.duration) || 0;
                var currentTime = (a && a.currentTime) || 0;
                if (duration !== currentTime) {
                    newCurrentTime = Math.round(duration !== 0 && currentTime ? currentTime % duration : 0);
                }
                else {
                    newCurrentTime = duration;
                }
            }
            this.currentTime = newCurrentTime;
            this.$timeout(this.updateCurrentTime, fps);
        };
        AnimationViewerController.prototype.redraw = function () {
            var _this = this;
            var a = this.activeAnimation;
            var $container = angular.element(document.querySelector(playerSelector));
            if (!a) {
                $container.empty().html(emptyShape);
                return;
            }
            var html;
            switch (this.shape) {
                case 'square':
                    html = rectangleShape;
                    break;
                case 'text':
                    html = textShape;
                    break;
                case 'button':
                    html = buttonShape;
                    break;
                default:
                    throw Error('No shape selected');
            }
            $container.empty().html(html);
            var currentTime;
            if (this.animator) {
                currentTime = this.animator.currentTime;
            }
            else {
                currentTime = 0;
            }
            if (a.timings.duration < 100) {
                a.timings.duration = 100;
            }
            var newAnimator = this.just.animate(a.keyframes, animationTargetSelector, {
                duration: a.timings.duration,
                easing: a.timings.easing,
                fill: 'none',
                iterations: 1
            });
            newAnimator.onfinish = function () {
                _this.playState = 'finished';
            };
            newAnimator.oncancel = function () {
                _this.playState = 'canceled';
            };
            switch (this.playState) {
                case 'paused':
                    newAnimator.pause();
                    break;
                case 'finished':
                    newAnimator.finish();
                    break;
                case 'canceled':
                    newAnimator.cancel();
                    break;
                default:
                    newAnimator.play();
                    break;
            }
            newAnimator.currentTime = currentTime;
            this.animator = newAnimator;
        };
        AnimationViewerController.$inject = ['$scope', '$timeout', 'project', 'just'];
        return AnimationViewerController;
    }());

    var NavigationMenuComponent = (function () {
        function NavigationMenuComponent() {
            this.controller = NavigationMenuController;
            this.templateUrl = './app/components/navigation-menu/navigation-menu.component.html';
        }
        return NavigationMenuComponent;
    }());
    var NavigationMenuController = (function () {
        function NavigationMenuController($timeout, $element) {
            $timeout(function () {
                angular.element($element).find('.nav-menu').kendoMenu();
            });
        }
        NavigationMenuController.$inject = ['$timeout', '$element'];
        return NavigationMenuController;
    }());

    var ProjectExplorerComponent = (function () {
        function ProjectExplorerComponent() {
            this.controller = ProjectExplorerController;
            this.templateUrl = './app/components/project-explorer/project-explorer.component.html';
        }
        return ProjectExplorerComponent;
    }());
    var ProjectExplorerController = (function () {
        function ProjectExplorerController($scope, projectService) {
            var _this = this;
            this.project = projectService.current;
            this.projectService = projectService;
            $scope.$watch(function () { return projectService.current; }, function () { return _this.project = projectService.current; });
        }
        ProjectExplorerController.prototype.inspect = function (animation, obj) {
            this.project.activeAnimation = animation;
            this.projectService.activeObject = obj;
        };
        ProjectExplorerController.prototype.isActive = function (obj) {
            return this.projectService.activeObject === obj;
        };
        ProjectExplorerController.$inject = ['$scope', 'project'];
        return ProjectExplorerController;
    }());

    var ObjectInspectorComponent = (function () {
        function ObjectInspectorComponent() {
            this.controller = ObjectInspectorController;
            this.templateUrl = './app/components/object-inspector/object-inspector.component.html';
        }
        return ObjectInspectorComponent;
    }());
    var ObjectInspectorController = (function () {
        function ObjectInspectorController($scope, projectService, metaService) {
            var _this = this;
            this.target = undefined;
            this.descriptor = undefined;
            this.showUnset = false;
            this.colorValueOptions = {
                buttons: true,
                preview: true,
                opacity: true
            };
            this.projectService = projectService;
            this.metaService = metaService;
            $scope.$watch(function () { return projectService.activeObject; }, function (newVal) {
                _this.target = newVal;
                _this.descriptor = metaService.getDescriptor(newVal);
            });
        }
        ObjectInspectorController.$inject = ['$scope', 'project', 'meta'];
        return ObjectInspectorController;
    }());



    var components = Object.freeze({
    	AnimationSourceEditorComponent: AnimationSourceEditorComponent,
    	AnimationViewerComponent: AnimationViewerComponent,
    	NavigationMenuComponent: NavigationMenuComponent,
    	ProjectExplorerComponent: ProjectExplorerComponent,
    	ObjectInspectorComponent: ObjectInspectorComponent
    });

    var MetaService = (function () {
        function MetaService() {
            this._descriptors = [];
        }
        MetaService.prototype.addDescriptor = function (descriptor) {
            this._descriptors.push(descriptor);
        };
        MetaService.prototype.getDescriptor = function (obj) {
            var descriptors = this._descriptors;
            var len = descriptors.length;
            for (var i = 0; i < len; i++) {
                var descriptor = descriptors[i];
                if (obj instanceof descriptor.type) {
                    return descriptor;
                }
            }
            return undefined;
        };
        return MetaService;
    }());

    var color_value = 'color_value';
    var integer = 'integer';
    var number = 'number';
    var string = 'string';
    var timingFunction = 'timing-function';
    var ModelDescriptor = (function () {
        function ModelDescriptor(options) {
            this.properties = undefined;
            this.type = undefined;
            this.properties = options.properties.map(function (p) { return new PropertyDescriptor(p); });
            this.type = options.type;
        }
        return ModelDescriptor;
    }());
    var PropertyDescriptor = (function () {
        function PropertyDescriptor(options) {
            this.name = undefined;
            this.restrict = undefined;
            this.selections = undefined;
            this.type = undefined;
            this.name = options.name;
            this.restrict = options.restrict || false;
            this.selections = options.selections || undefined;
            this.type = options.type;
        }
        return PropertyDescriptor;
    }());

    var Keyframe = (function () {
        function Keyframe(options) {
            if (options) {
                this.setState(options);
            }
        }
        Keyframe.prototype.resetToEmpty = function () {
            for (var name in this) {
                var prop = this[name];
                if (prop === undefined || typeof prop === 'function') {
                    continue;
                }
                if (typeof prop === 'string') {
                    this[name] = undefined;
                    continue;
                }
                if (typeof prop === 'number') {
                    this[name] = undefined;
                    continue;
                }
                if (typeof prop.length === 'number') {
                    this[name] = undefined;
                    continue;
                }
            }
        };
        Keyframe.prototype.getState = function () {
            var state = {};
            var keys = Object.keys(this).sort();
            var length = keys.length;
            for (var i = 0; i < length; i++) {
                var key = keys[i];
                if (key === '_lastState') {
                    continue;
                }
                var val = this[key];
                if (val === undefined) {
                    continue;
                }
                state[key] = val;
            }
            return state;
        };
        Keyframe.prototype.setState = function (options) {
            this.resetToEmpty();
            angular.extend(this, options);
        };
        return Keyframe;
    }());
    var KeyframeDescriptor = new ModelDescriptor({
        properties: [
            {
                name: 'backdrop-filter',
                type: string
            },
            {
                name: 'background',
                type: string
            },
            {
                name: 'background-color',
                type: color_value
            },
            {
                name: 'background-position',
                type: string
            },
            {
                name: 'background-size',
                type: string
            },
            {
                name: 'border',
                type: string
            },
            {
                name: 'border-bottom',
                type: string
            },
            {
                name: 'border-bottom-color',
                type: color_value
            },
            {
                name: 'border-bottom-left-radius',
                type: number
            },
            {
                name: 'border-bottom-right-radius',
                type: number
            },
            {
                name: 'border-bottom-width',
                type: string
            },
            {
                name: 'border-color',
                type: color_value
            },
            {
                name: 'border-left',
                type: string
            },
            {
                name: 'border-left-color',
                type: color_value
            },
            {
                name: 'border-left-width',
                type: string
            },
            {
                name: 'border-radius',
                type: number
            },
            {
                name: 'border-right',
                type: string
            },
            {
                name: 'border-right-color',
                type: color_value
            },
            {
                name: 'border-right-width',
                type: string
            },
            {
                name: 'border-top',
                type: string
            },
            {
                name: 'border-top-color',
                type: string
            },
            {
                name: 'border-top-left-radius',
                type: number
            },
            {
                name: 'border-top-right-radius',
                type: number
            },
            {
                name: 'border-top-width',
                type: string
            },
            {
                name: 'border-width',
                type: string
            },
            {
                name: 'bottom',
                type: string
            },
            {
                name: 'box-shadow',
                type: string
            },
            {
                name: 'clip',
                type: string
            },
            {
                name: 'clip-path',
                type: string
            },
            {
                name: 'color',
                type: color_value
            },
            {
                name: 'column-count',
                type: string
            },
            {
                name: 'column-gap',
                type: string
            },
            {
                name: 'column-rule',
                type: string
            },
            {
                name: 'column-rule-color',
                type: color_value
            },
            {
                name: 'column-rule-width',
                type: string
            },
            {
                name: 'column-width',
                type: string
            },
            {
                name: 'columns',
                type: string
            },
            {
                name: 'fill',
                type: string
            },
            {
                name: 'fillOpacity',
                type: string
            },
            {
                name: 'fillRule',
                type: string
            },
            {
                name: 'filter',
                type: string
            },
            {
                name: 'flex',
                type: string
            },
            {
                name: 'flex-basis',
                type: string
            },
            {
                name: 'flex-grow',
                type: string
            },
            {
                name: 'flex-shrink',
                type: string
            },
            {
                name: 'font',
                type: string
            },
            {
                name: 'font-size',
                type: string
            },
            {
                name: 'font-size-adjust',
                type: string
            },
            {
                name: 'font-stretch',
                type: string
            },
            {
                name: 'font-weight',
                type: string
            },
            {
                name: 'grid-column-gap',
                type: string
            },
            {
                name: 'grid-gap',
                type: string
            },
            {
                name: 'grid-row-gap',
                type: string
            },
            {
                name: 'height',
                type: string
            },
            {
                name: 'left',
                type: string
            },
            {
                name: 'letter-spacing',
                type: string
            },
            {
                name: 'line-height',
                type: string
            },
            {
                name: 'margin',
                type: string
            },
            {
                name: 'margin-bottom',
                type: string
            },
            {
                name: 'margin-left',
                type: string
            },
            {
                name: 'margin-right',
                type: string
            },
            {
                name: 'margin-top',
                type: string
            },
            {
                name: 'mask',
                type: string
            },
            {
                name: 'mask-position',
                type: string
            },
            {
                name: 'mask-size',
                type: string
            },
            {
                name: 'max-height',
                type: string
            },
            {
                name: 'max-width',
                type: string
            },
            {
                name: 'min-height',
                type: string
            },
            {
                name: 'min-width',
                type: string
            },
            {
                name: 'motion-offset',
                type: string
            },
            {
                name: 'motion-rotation',
                type: string
            },
            {
                name: 'object-position',
                type: string
            },
            {
                name: 'opacity',
                type: number
            },
            {
                name: 'order',
                type: number
            },
            {
                name: 'outline',
                type: string
            },
            {
                name: 'outline-color',
                type: color_value
            },
            {
                name: 'outline-offset',
                type: string
            },
            {
                name: 'outline-width',
                type: string
            },
            {
                name: 'padding',
                type: string
            },
            {
                name: 'padding-bottom',
                type: string
            },
            {
                name: 'padding-left',
                type: string
            },
            {
                name: 'padding-right',
                type: string
            },
            {
                name: 'padding-top',
                type: string
            },
            {
                name: 'perspective',
                type: string
            },
            {
                name: 'perspective-origin',
                type: string
            },
            {
                name: 'right',
                type: string
            },
            {
                name: 'rotate',
                type: string
            },
            {
                name: 'rotate3d',
                type: string
            },
            {
                name: 'rotateX',
                type: string
            },
            {
                name: 'rotateY',
                type: string
            },
            {
                name: 'rotateZ',
                type: string
            },
            {
                name: 'scale',
                type: number
            },
            {
                name: 'scale3d',
                type: string
            },
            {
                name: 'scaleX',
                type: number
            },
            {
                name: 'scaleY',
                type: number
            },
            {
                name: 'scaleZ',
                type: number
            },
            {
                name: 'scroll-snap-coordinate',
                type: string
            },
            {
                name: 'scroll-snap-destination',
                type: string
            },
            {
                name: 'skew',
                type: string
            },
            {
                name: 'skewX',
                type: string
            },
            {
                name: 'skewY',
                type: string
            },
            {
                name: 'shape-image-threshold',
                type: string
            },
            {
                name: 'shape-margin',
                type: string
            },
            {
                name: 'shape-outside',
                type: string
            },
            {
                name: 'stroke',
                type: string
            },
            {
                name: 'strokeDasharray',
                type: string
            },
            {
                name: 'strokeDashoffset',
                type: string
            },
            {
                name: 'strokeLinecap',
                type: string
            },
            {
                name: 'strokeLinejoin',
                type: string
            },
            {
                name: 'strokeMiterlimit',
                type: string
            },
            {
                name: 'strokeOpacity',
                type: number
            },
            {
                name: 'strokeWidth',
                type: string
            },
            {
                name: 'text-decoration',
                type: string
            },
            {
                name: 'text-decoration-color',
                type: color_value
            },
            {
                name: 'text-emphasis',
                type: string
            },
            {
                name: 'text-emphasis-color',
                type: color_value
            },
            {
                name: 'text-indent',
                type: string
            },
            {
                name: 'text-shadow',
                type: string
            },
            {
                name: 'top',
                type: string
            },
            {
                name: 'transform',
                type: string
            },
            {
                name: 'transform-origin',
                type: string
            },
            {
                name: 'translate',
                type: string
            },
            {
                name: 'translate3d',
                type: string
            },
            {
                name: 'translateX',
                type: string
            },
            {
                name: 'translateY',
                type: string
            },
            {
                name: 'translateZ',
                type: string
            },
            {
                name: 'vertical-align',
                type: string
            },
            {
                name: 'visibility',
                type: string
            },
            {
                name: 'width',
                type: string
            },
            {
                name: 'word-spacing',
                type: string
            },
            {
                name: 'z-index',
                type: number
            }
        ],
        type: Keyframe
    });

    var AnimationEffectTiming = (function () {
        function AnimationEffectTiming(options) {
            this.resetToEmpty();
            if (options) {
                this.setState(options);
            }
        }
        AnimationEffectTiming.prototype.resetToEmpty = function () {
            this.setState({
                duration: 1000,
                easing: 'ease',
                fill: 'none',
                iterations: 1
            });
        };
        AnimationEffectTiming.prototype.setState = function (state) {
            if (state.duration) {
                this.duration = state.duration;
            }
            if (state.easing) {
                this.easing = state.easing;
            }
            if (state.fill) {
                this.fill = state.fill;
            }
            if (state.iterations) {
                this.iterations = state.iterations;
            }
        };
        AnimationEffectTiming.prototype.getState = function () {
            return {
                duration: this.duration,
                easing: this.easing,
                fill: this.fill,
                iterations: this.iterations
            };
        };
        AnimationEffectTiming.prototype.toString = function () {
            var state = this.getState();
            return JSON.stringify(state, undefined, '\t');
        };
        return AnimationEffectTiming;
    }());
    var AnimationEffectTimingDescriptor = new ModelDescriptor({
        properties: [
            {
                name: 'duration',
                type: integer
            },
            {
                name: 'easing',
                type: timingFunction
            },
            {
                name: 'fill',
                restrict: true,
                selections: ['none', 'forwards', 'backwards', 'both'],
                type: string
            },
            {
                name: 'iterations',
                type: integer
            }
        ],
        type: AnimationEffectTiming
    });

    var Animation = (function () {
        function Animation(options) {
            this.name = undefined;
            this.keyframes = undefined;
            this.timings = undefined;
            this.activeKeyframeIndex = -1;
            this.resetToEmpty();
            if (options) {
                this.setState(options);
            }
        }
        Animation.prototype.resetToEmpty = function () {
            this.setState({
                keyframes: [],
                name: '',
                timings: {
                    duration: 1000,
                    easing: 'ease',
                    fill: 'both',
                    iterations: 1
                }
            });
        };
        Animation.prototype.setState = function (state) {
            this.name = state.name;
            if (!this.keyframes) {
                this.keyframes = state.keyframes.map(function (s) { return new Keyframe(s); });
            }
            else if (this.keyframes.length !== state.keyframes.length) {
                this.keyframes = state.keyframes.map(function (s) { return new Keyframe(s); });
            }
            else {
                for (var i = 0, len = this.keyframes.length; i < len; i++) {
                    this.keyframes[i].setState(state.keyframes[i]);
                }
            }
            if (!this.timings) {
                this.timings = new AnimationEffectTiming(state.timings);
            }
            else {
                this.timings.setState(state.timings);
            }
            this._lastState = JSON.stringify(state);
        };
        Animation.prototype.getState = function () {
            var state = {
                keyframes: (this.keyframes || []).map(function (k) { return k.getState(); }),
                name: this.name,
                timings: this.timings
            };
            if (this._lastState) {
                var lastState = JSON.parse(this._lastState);
                if (angular.equals(state, lastState)) {
                    return lastState;
                }
            }
            return state;
        };
        Animation.prototype.toString = function () {
            var state = this.getState();
            return JSON.stringify(state, undefined, '\t');
        };
        return Animation;
    }());
    var AnimationDescriptor = new ModelDescriptor({
        properties: [
            {
                name: 'name',
                type: string
            }
        ],
        type: Animation
    });

    var Project = (function () {
        function Project(options) {
            this.resetToEmpty();
            if (options) {
                this.setState(options);
            }
            this.initialState = angular.copy(this);
        }
        Project.prototype.resetToEmpty = function () {
            this.name = 'Default';
            this.animations = [
                new Animation({
                    keyframes: [
                        {
                            "rotate": "0",
                            "transform-origin": "50% 50%"
                        },
                        {
                            "rotate": "180deg"
                        },
                        {
                            "rotate": "360deg"
                        }
                    ],
                    name: 'twirl',
                    timings: {
                        duration: 2500,
                        easing: 'ease-out',
                        fill: 'both',
                        iterations: 1
                    }
                }),
                new Animation({
                    keyframes: [
                        { opacity: 0 },
                        { opacity: 1 }
                    ],
                    name: 'fadeIn',
                    timings: {
                        duration: 1000,
                        easing: 'ease-out',
                        fill: 'both',
                        iterations: 1
                    }
                })
            ];
            this.activeAnimation = undefined;
        };
        Project.prototype.resetToInitial = function () {
            this.setState(this.initialState);
        };
        Project.prototype.setState = function (state) {
            this.name = state.name;
            this.animations = state.animations.map(function (s) { return new Animation(s); });
        };
        return Project;
    }());
    var ProjectDescriptor = new ModelDescriptor({
        properties: [
            {
                name: 'name',
                type: string
            }
        ],
        type: Project
    });

    var ProjectService = (function () {
        function ProjectService() {
            this.current = undefined;
            this.activeObject = undefined;
            this.resetToEmpty();
        }
        ProjectService.prototype.resetToEmpty = function () {
            this.current = new Project();
        };
        ProjectService.prototype.importProject = function (options) {
            this.current = new Project(options);
        };
        return ProjectService;
    }());



    var services = Object.freeze({
    	MetaService: MetaService,
    	ProjectService: ProjectService
    });



    var descriptors = Object.freeze({
    	AnimationDescriptor: AnimationDescriptor,
    	AnimationEffectTimingDescriptor: AnimationEffectTimingDescriptor,
    	KeyframeDescriptor: KeyframeDescriptor,
    	ProjectDescriptor: ProjectDescriptor
    });

    function convertPascalToHyphenated(input) {
        return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
    }
    function minimize(input) {
        if (!input || input.length < 1) {
            return input;
        }
        return input[0].toLowerCase() + input.substr(1, input.length - 1);
    }
    function unsuffix(input, suffix) {
        var lastIndexOfSuffix = input.lastIndexOf(suffix);
        if (lastIndexOfSuffix === -1) {
            return input;
        }
        return input.substr(0, lastIndexOfSuffix);
    }

    function appStart(layout) {
        var app = angular.module('app', ['just.animate', 'kendo.directives']);
        for (var name in services) {
            var prop = services[name];
            var ngName = minimize(unsuffix(name, 'Service'));
            app.service(ngName, prop);
        }
        var _loop_1 = function(name) {
            var prop = components[name];
            var ngName = minimize(unsuffix(name, 'Component'));
            var selector = convertPascalToHyphenated(ngName);
            app.component(ngName, new prop());
            layout.registerComponent(selector, function (container, componentState) {
                var $container = angular.element(container.getElement());
                $container.html("<" + selector + "></" + selector + ">");
            });
        };
        for (var name in components) {
            _loop_1(name);
        }
        app.run(['meta', function (meta) {
                for (var name in descriptors) {
                    meta.addDescriptor(descriptors[name]);
                }
            }]);
        app.run(['$rootScope', function registerEvents($rootScope) {
            }]);
        return app;
    }

    document.addEventListener('DOMContentLoaded', function () {
        var $container = document.getElementById('viewport');
        var layout = new GoldenLayout(config, $container);
        var ngApp = appStart(layout);
        layout.init();
        $(window).resize('resize', debounce(function () {
            layout.updateSize();
        }, 125));
        require.config({
            paths: {
                'vs': 'libs/monaco-editor/min/vs'
            }
        });
        require(['vs/editor/editor.main'], function () {
            angular.bootstrap(document.body, ['app'], { strictDi: true });
        });
    });

}());